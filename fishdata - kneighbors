#!/usr/bin/env python
# coding: utf-8

# In[6]:


bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]
bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 475.0, 500.0, 
                500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 575.0, 685.0, 620.0, 680.0, 
                700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 920.0, 955.0, 925.0, 975.0, 950.0]


# In[7]:


import matplotlib.pyplot as plt
plt.scatter(bream_length,bream_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()


# In[8]:


smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 14.3, 15.0]
smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 19.7, 19.9]
plt.scatter(bream_length, bream_weight)
plt.scatter(smelt_length, smelt_weight)
plt.xlabel('length')
plt.ylabel('weight')
plt.show()


# In[9]:


length=bream_length+smelt_weight
weight=bream_weight+smelt_weight


# In[10]:


fish_data=[[l,w]for l,w in zip(length,weight)]


# In[11]:


fish_data


# In[24]:


fish_target=[1]*35+[0]*14
print(fish_target)


# In[28]:


from sklearn.neighbors import KNeighborsClassifier
kn=KNeighborsClassifier()


# In[29]:


kn.fit(fish_data,fish_target)


# In[30]:


kn.score(fish_data,fish_target)


# In[31]:


kn.predict([[30,600]])


# In[32]:


train_input = fish_data[:35]
train_target= fish_target[:35]
test_input=fish_data[35:]
test_target=fish_target[35:]


# In[33]:


kn=kn.fit(train_input,train_target)
kn.score(test_input,test_target)


# In[34]:


import numpy as np


# In[35]:


input_arr=np.array(fish_data)
target_arr=np.array(fish_target)
print(input_arr)


# In[36]:


print(input_arr.shape)


# In[38]:


np.random.seed(42)
index=np.arange(49)
np.random.shuffle(index)


# In[39]:


print(index)


# In[40]:


train_input=input_arr[index[:35]]
train_target=target_arr[index[:35]]
test_input=input_arr[index[35:]]
test_target=target_arr[index[35:]]


# In[41]:


plt.scatter(train_input[:,0],train_input[:,1])
plt.scatter(test_input[:,0],test_input[:,1])
plt.xlabel('length')
plt.ylabel('weight')
plt.show()


# In[43]:


kn=kn.fit(train_input,train_target)
kn.score(test_input,test_target)


# In[44]:


kn.predict(test_input)


# In[45]:


test_target


# In[3]:


import numpy as np


# In[12]:


np.column_stack(([1,2,3],[4,5,6]))
fish_data=np.column_stack((length,weight))


# In[14]:


print(fish_data[:5])


# In[15]:


length[:5]


# In[16]:


weight[:5]


# In[44]:


fish_target=np.concatenate((np.ones(35),np.zeros(14)))


# In[36]:


fish_target


# In[37]:


from sklearn.model_selection import train_test_split


# In[38]:


train_input,test_input,train_target,test_target = train_test_split(fish_data,fish_target,random_state=42)


# In[39]:


train_target


# In[40]:


train_input


# In[41]:


train_input,test_input,train_target,test_target = train_test_split(fish_data,fish_target,random_state=42,stratify=fish_target)


# In[42]:


test_target


# In[46]:


from sklearn.neighbors import KNeighborsClassifier
kn=KNeighborsClassifier()
kn.fit(train_input,train_target)


# In[47]:


kn.score(test_input,test_target)


# In[48]:


kn.predict([[25,150]])


# In[58]:


fish_data


# In[61]:


plt.scatter(x=fish_data[:,0],y=fish_data[:,1])
plt.scatter(25,150,marker='^')
plt.show()


# In[62]:


distances,indexes=kn.kneighbors([[25,150]])


# In[65]:


indexes


# In[68]:


train_input[21]


# In[69]:


print(train_target[indexes])


# In[70]:


mean=np.mean(train_input,axis=0)
std=np.std(train_input,axis=0)

print(mean,std)


# In[71]:


train_scaled=(train_input-mean)/std


# In[76]:


new=(([25,150]-mean)/std)
plt.scatter(train_scaled[:,0],train_scaled[:,1])
plt.scatter(new[0],new[1],marker='^')
plt.xlabel('lenght')
plt.ylabel('weight')
plt.show()


# In[78]:


kn.fit(train_scaled,train_target)


# In[79]:


test_scaled=(test_input-mean)/std
kn.score(test_scaled,test_target)
print(kn.predict([new]))


# In[ ]:




